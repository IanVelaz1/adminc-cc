!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core")):"function"==typeof define&&define.amd?define("ngx-paypal",["exports","@angular/core"],t):t(n["ngx-paypal"]={},n.ng.core)}(this,function(n,t){"use strict";var e=function(n,t,e){this.integrationType=n,this.environment=t,this.commit=!0,Object.assign(this,e)},i={Card:0,Credit:1,Elv:2};i[i.Card]="Card",i[i.Credit]="Credit",i[i.Elv]="Elv";var o={ClientSideREST:0,ServerSideREST:1};o[o.ClientSideREST]="ClientSideREST",o[o.ServerSideREST]="ServerSideREST";var r=function(){function n(){this.useGlobalConfig=!1,this.registerPayPalScriptWhenContainerIsReady=!1,this.paypalWindowName="paypal",this.paypalScriptUrl="https://www.paypalobjects.com/api/checkout.js",this.payPalButtonContainerIdPrefix="ngx-paypal-button-container-"}return Object.defineProperty(n.prototype,"payPalButtonContainerElem",{set:function(n){n&&(this._payPalButtonContainerElem=n)},enumerable:!0,configurable:!0}),n.prototype.ngOnChanges=function(n){this.config&&this.initPayPal()},n.prototype.ngAfterViewInit=function(){this.registerPayPalScriptWhenContainerIsReady&&this._payPalButtonContainerElem&&(this.setupScript(),this.registerPayPalScriptWhenContainerIsReady=!1)},n.prototype.initPayPal=function(){this.payPalButtonContainerId=""+this.payPalButtonContainerIdPrefix+this.getPseudoUniqueNumber(),window[this.paypalWindowName]?this.handleScriptRegistering():this.addPayPalScriptToPage()},n.prototype.getPseudoUniqueNumber=function(){return(new Date).valueOf()},n.prototype.addPayPalScriptToPage=function(){var n=this,t=document.createElement("script");t.innerHTML="",t.src=this.paypalScriptUrl,t.onload=function(){return n.handleScriptRegistering()},t.async=!0,t.defer=!0,this.paypalScriptElem.nativeElement.appendChild(t)},n.prototype.handleScriptRegistering=function(){this._payPalButtonContainerElem&&this._payPalButtonContainerElem.nativeElement&&this._payPalButtonContainerElem.nativeElement.id===this.payPalButtonContainerId?this.setupScript():this.registerPayPalScriptWhenContainerIsReady=!0},n.prototype.setupScript=function(){var e=this;if(!this._payPalButtonContainerElem)throw Error("Cannot setup script because paypal button container with id '"+this.payPalButtonContainerId+"' is not yet ready");if(this._payPalButtonContainerElem.nativeElement.innerHTML="",!window[this.paypalWindowName])throw Error("PayPal script is not available");window[this.paypalWindowName].Button.render({env:this.config.environment.toString(),commit:this.config.commit,client:this.getClient(),style:this.config.button,funding:this.getFunding(),payment:function(n,t){if(e.config.integrationType===o.ServerSideREST){if(!e.config.payment)throw Error("You need set up a create payment method and return\n                            PayPal's payment id when using server side integration");return e.config.payment().toPromise().then(function(n){return n})}if(e.config.integrationType===o.ClientSideREST){if(!e.config.transactions||!Array.isArray(e.config.transactions)||e.config.transactions.length<=0)throw Error("You need to provide at least 1 transaction for client side integration");return t.payment.create({payment:{transactions:e.config.transactions}})}},onAuthorize:function(n,t){if(e.config.integrationType===o.ServerSideREST){if(!e.config.onAuthorize)throw Error("You need set up an execute method when using server side integration");return e.config.onAuthorize(n,t).toPromise()}if(e.config.integrationType===o.ClientSideREST)return t.payment.execute().then(function(){if(!e.config.onPaymentComplete)throw Error("You should provide some callback when payment is finished when using client side integration");e.config.onPaymentComplete(n,t)})},onError:function(n){e.config.onError&&e.config.onError(n)},onCancel:function(n,t){e.config.onCancel&&e.config.onCancel(n,t)}},"#"+this.payPalButtonContainerId)},n.prototype.getClient=function(){if(this.config.integrationType===o.ClientSideREST){if(!this.config.client)throw Error("You need to setup client information when using client side integration");return{production:this.config.client.production,sandbox:this.config.client.sandbox}}return undefined},n.prototype.getFunding=function(){var t=this;if(!this.config.funding)return undefined;var e=[],i=[];return this.config.funding.allowed&&this.config.funding.allowed.forEach(function(n){e.push(t.mapFundingType(n))}),this.config.funding.disallowed&&this.config.funding.disallowed.forEach(function(n){i.push(t.mapFundingType(n))}),{allowed:e,disallowed:i}},n.prototype.mapFundingType=function(n){if(n===i.Card)return paypal.FUNDING.CARD;if(n===i.Credit)return paypal.FUNDING.CREDIT;if(n===i.Elv)return paypal.FUNDING.ELV;throw Error("Unsupported funding type '"+n+"'")},n.decorators=[{type:t.Component,args:[{selector:"ngx-paypal",template:'\n    <div #payPalScriptElem></div>\n    <div #payPalButtonContainerElem [id]="payPalButtonContainerId"></div>\n    '}]}],n.ctorParameters=function(){return[]},n.propDecorators={config:[{type:t.Input}],useGlobalConfig:[{type:t.Input}],paypalScriptElem:[{type:t.ViewChild,args:["payPalScriptElem"]}],payPalButtonContainerElem:[{type:t.ViewChild,args:["payPalButtonContainerElem"]}]},n}(),a=function(){function n(){}return n.decorators=[{type:t.NgModule,args:[{imports:[],declarations:[r],exports:[r]}]}],n}();n.PayPalConfig=e,n.NgxPaypalComponent=r,n.NgxPayPalModule=a,n.PayPalEnvironment={Sandbox:"sandbox",Production:"production"},n.PayPalFunding=i,n.PayPalIntegrationType=o,Object.defineProperty(n,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-paypal.umd.min.js.map