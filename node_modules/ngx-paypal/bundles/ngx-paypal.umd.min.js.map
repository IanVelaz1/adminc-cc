{"version":3,"sources":["ng://ngx-paypal/lib/models/paypal-models.ts","ng://ngx-paypal/lib/components/paypal-component.ts","ng://ngx-paypal/lib/ngx-paypal.module.ts","ng://ngx-paypal/lib/models/paypal-environment.ts"],"names":["PayPalConfig","integrationType","environment","config","this","Object","assign","NgxPaypalComponent","defineProperty","prototype","content","_payPalButtonContainerElem","ngOnChanges","changes","initPayPal","ngAfterViewInit","registerPayPalScriptWhenContainerIsReady","setupScript","payPalButtonContainerId","payPalButtonContainerIdPrefix","getPseudoUniqueNumber","window","paypalWindowName","handleScriptRegistering","addPayPalScriptToPage","Date","valueOf","script","document","createElement","innerHTML","src","paypalScriptUrl","onload","_this","async","defer","paypalScriptElem","nativeElement","appendChild","id","Error","Button","render","env","toString","commit","client","getClient","style","button","funding","getFunding","payment","data","actions","PayPalIntegrationType","ServerSideREST","toPromise","then","paymentId","ClientSideREST","transactions","Array","isArray","length","create","onAuthorize","execute","onPaymentComplete","onError","err","onCancel","production","sandbox","undefined","allowed","disallowed","forEach","type","push","mapFundingType","PayPalFunding","Card","paypal","FUNDING","CARD","Credit","CREDIT","Elv","ELV","Component","args","selector","template","Input","ViewChild","NgxPayPalModule","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\r\n\r\nimport { PayPalFunding } from './paypal-funding';\r\nimport { PayPalEnvironment } from './paypal-environment';\r\nimport { PayPalIntegrationType } from './paypal-integration';\r\n\r\nexport class PayPalConfig {\r\n\r\n    /**\r\n     * Show 'Pay Now' button config\r\n     */\r\n    public commit = true;\r\n\r\n    /**\r\n     * Called to create new payment for server side integration\r\n     */\r\n    public payment?: () => Observable<string>;\r\n\r\n    /**\r\n     * Called to execute payment for server side integration\r\n     */\r\n    public onAuthorize?: (data: IPayPalPaymentCompleteData, actions: any) => Observable<void>;\r\n\r\n    /**\r\n     * Client tokens for client side integration\r\n     */\r\n    public client?: IPaypalClient;\r\n\r\n    /**\r\n     * Array of transaction, required for client side integration\r\n     */\r\n    public transactions?: IPayPalTransaction[];\r\n\r\n    /**\r\n     * Called for client side integration when payment is executed\r\n     */\r\n    public onPaymentComplete?: (data: IPayPalPaymentCompleteData, actions: any) => void;\r\n\r\n    /**\r\n     * Button configuration\r\n     */\r\n    public button?: IPayPalButtonStyle;\r\n\r\n    /**\r\n     * Paypal funding configuration\r\n     */\r\n    public funding?: IPayPalFunding;\r\n\r\n    /**\r\n     * Called when PayPal experiences an error\r\n     */\r\n    public onError?: (err: any) => void;\r\n\r\n    /**\r\n     * Called when user cancels payment\r\n     */\r\n    public onCancel?: (data: IPayPalCancelPayment, actions: any) => void;\r\n\r\n    constructor(\r\n        /**\r\n         * Type of the integration\r\n         */\r\n        public integrationType: PayPalIntegrationType,\r\n        /**\r\n         * Environment\r\n         */\r\n        public environment: PayPalEnvironment,\r\n        config: {\r\n            onError?: (err: any) => void,\r\n            onCancel?: (data: IPayPalCancelPayment, actions: any) => void,\r\n            payment?: () => Observable<string>,\r\n            onAuthorize?: (data: IPayPalPaymentCompleteData, actions: any) => Observable<void>,\r\n            client?: IPaypalClient,\r\n            onPaymentComplete?: (data: IPayPalPaymentCompleteData, actions: any) => void,\r\n            transactions?: IPayPalTransaction[],\r\n            commit?: boolean,\r\n            button?: IPayPalButtonStyle,\r\n            funding?: IPayPalFunding\r\n        }) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\n\r\nexport interface IPayPalPaymentCompleteData {\r\n    intent: string;\r\n    orderID: string;\r\n    payerID: string;\r\n    paymentID: string;\r\n    paymentToken: string;\r\n    returnUrl: string;\r\n}\r\n\r\nexport interface IPayPalCancelPayment {\r\n    data: IPayPalCancelPaymentData;\r\n    actions: any;\r\n}\r\n\r\nexport interface IPayPalCancelPaymentData {\r\n    billingID: string;\r\n    cancelUrl: string;\r\n    intent: string;\r\n    paymentID: string;\r\n    paymentToken: string;\r\n}\r\n\r\nexport interface IPaypalClient {\r\n    sandbox?: string;\r\n    production?: string;\r\n}\r\n\r\nexport interface IPayPalTransaction {\r\n    amount: IPayPalAmount;\r\n    custom?: string;\r\n}\r\n\r\nexport interface IPayPalAmount {\r\n    total: number;\r\n    currency: string;\r\n}\r\n\r\nexport interface IPayPalButtonStyle {\r\n    label?: 'checkout' | 'pay' | 'buynow' | 'paypal';\r\n    size?: 'small' | 'medium' | 'large' | 'responsive';\r\n    shape?: 'pill' | 'rect';\r\n    color?: 'gold' | 'blue' | 'silver' | 'black';\r\n    tagline?: false;\r\n    fundingicons?: boolean;\r\n    branding?: boolean;\r\n}\r\n\r\nexport interface IPayPalFunding {\r\n    allowed: PayPalFunding[];\r\n    disallowed: PayPalFunding[];\r\n}\r\n\r\n","import { AfterViewInit, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild } from '@angular/core';\r\n\r\nimport { PayPalFunding } from '../models/paypal-funding';\r\nimport { PayPalIntegrationType } from '../models/paypal-integration';\r\nimport { IPaypalClient, IPayPalPaymentCompleteData, PayPalConfig } from '../models/paypal-models';\r\n\r\n/**\r\n * Global variable where PayPal is loaded to\r\n */\r\ndeclare var paypal: any;\r\n\r\n@Component({\r\n    selector: 'ngx-paypal',\r\n    template: `\r\n    <div #payPalScriptElem></div>\r\n    <div #payPalButtonContainerElem [id]=\"payPalButtonContainerId\"></div>\r\n    `\r\n})\r\nexport class NgxPaypalComponent implements OnChanges, AfterViewInit {\r\n\r\n    /**\r\n     * Configuration for paypal.\r\n     */\r\n    @Input() config: PayPalConfig;\r\n\r\n    /**\r\n     * Indicates if global configuration (provided via 'forRoot') is used\r\n     */\r\n    @Input() useGlobalConfig = false;\r\n\r\n    /**\r\n     * Container for paypal script\r\n     */\r\n    @ViewChild('payPalScriptElem') paypalScriptElem: ElementRef;\r\n\r\n    /**\r\n     * Used for indicating delayed rendered if container is not yet ready in DOM\r\n     */\r\n    private registerPayPalScriptWhenContainerIsReady = false;\r\n\r\n    /**\r\n     * Holds current container element\r\n     */\r\n    private _payPalButtonContainerElem?: ElementRef;\r\n    @ViewChild('payPalButtonContainerElem') set payPalButtonContainerElem(content: ElementRef) {\r\n        if (content) {\r\n            this._payPalButtonContainerElem = content;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Name of the global variable where paypal is stored\r\n    */\r\n    private readonly paypalWindowName = 'paypal';\r\n\r\n    /**\r\n     * PayPal integration script url\r\n     */\r\n    private readonly paypalScriptUrl = 'https://www.paypalobjects.com/api/checkout.js';\r\n\r\n    /**\r\n     * Id of the element where PayPal button will be rendered\r\n     */\r\n    public payPalButtonContainerId?: string;\r\n\r\n    private readonly payPalButtonContainerIdPrefix = 'ngx-paypal-button-container-';\r\n\r\n    constructor(\r\n    ) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // init when config once its available\r\n        if (this.config) {\r\n            this.initPayPal();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        // register script if element is ready in dom\r\n        if (this.registerPayPalScriptWhenContainerIsReady && this._payPalButtonContainerElem) {\r\n            this.setupScript();\r\n            this.registerPayPalScriptWhenContainerIsReady = false;\r\n        }\r\n    }\r\n\r\n    private initPayPal(): void {\r\n        // set unique paypal container button id\r\n        this.payPalButtonContainerId = `${this.payPalButtonContainerIdPrefix}${this.getPseudoUniqueNumber()}`;\r\n        // check if paypal was already register and if so, don't add it to page again\r\n        if (!window[this.paypalWindowName]) {\r\n            // register script\r\n            this.addPayPalScriptToPage();\r\n        } else {\r\n            // just register payment\r\n            this.handleScriptRegistering();\r\n        }\r\n    }\r\n\r\n    private getPseudoUniqueNumber(): number {\r\n        return new Date().valueOf();\r\n    }\r\n\r\n    private addPayPalScriptToPage(): void {\r\n        const script = document.createElement('script');\r\n        script.innerHTML = '';\r\n        script.src = this.paypalScriptUrl;\r\n        script.onload = () => this.handleScriptRegistering();\r\n        script.async = true;\r\n        script.defer = true;\r\n\r\n        this.paypalScriptElem.nativeElement.appendChild(script);\r\n    }\r\n\r\n    private handleScriptRegistering(): void {\r\n        // check if container with requested id exists\r\n        // this is here because dynamically switching between components would cause PayPal to\r\n        // throw an error if the container already existed before\r\n        if (this._payPalButtonContainerElem && this._payPalButtonContainerElem.nativeElement &&\r\n            this._payPalButtonContainerElem.nativeElement.id === this.payPalButtonContainerId) {\r\n            // container is ready, setup script right away\r\n            this.setupScript();\r\n        } else {\r\n            // container is not ready, delay registering until it is\r\n            this.registerPayPalScriptWhenContainerIsReady = true;\r\n        }\r\n    }\r\n\r\n    private setupScript(): void {\r\n        // first clear container\r\n        if (!this._payPalButtonContainerElem) {\r\n            throw Error(`Cannot setup script because paypal button container with id '${this.payPalButtonContainerId}' is not yet ready`);\r\n        }\r\n\r\n        this._payPalButtonContainerElem.nativeElement.innerHTML = '';\r\n\r\n        if (!window[this.paypalWindowName]) {\r\n            throw Error('PayPal script is not available', );\r\n        }\r\n\r\n        // render PayPal button as per their docs at\r\n        // https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/add-paypal-button/\r\n        window[this.paypalWindowName].Button.render({\r\n            // set environment\r\n            env: this.config.environment.toString(),\r\n\r\n            // Show the buyer a 'Pay Now' button in the checkout flow\r\n            commit: this.config.commit,\r\n\r\n            // init client for client side integration\r\n            client: this.getClient(),\r\n\r\n            // set button config if available\r\n            style: this.config.button,\r\n\r\n            // set funding if available\r\n            funding: this.getFunding(),\r\n\r\n            // payment() is called when the button is clicked\r\n            payment: (data, actions) => {\r\n                if (this.config.integrationType === PayPalIntegrationType.ServerSideREST) {\r\n                    // client needs to create payment on server side\r\n                    if (!this.config.payment) {\r\n                        throw Error(`You need set up a create payment method and return\r\n                            PayPal's payment id when using server side integration`);\r\n                    }\r\n\r\n                    // Paypal expects promise with payment id (string) to be returned\r\n                    return this.config.payment().toPromise()\r\n                        .then(paymentId => {\r\n                            return paymentId;\r\n                        });\r\n                }\r\n\r\n                if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n                    if (!this.config.transactions || !Array.isArray(this.config.transactions) || this.config.transactions.length <= 0) {\r\n                        throw Error(`You need to provide at least 1 transaction for client side integration`);\r\n                    }\r\n\r\n                    return actions.payment.create({\r\n                        payment: {\r\n                            transactions: this.config.transactions\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n\r\n            // onAuthorize() is called when the buyer approves the payment\r\n            onAuthorize: (data: IPayPalPaymentCompleteData, actions: any) => {\r\n                if (this.config.integrationType === PayPalIntegrationType.ServerSideREST) {\r\n                    // client needs to server to execute the payment\r\n                    if (!this.config.onAuthorize) {\r\n                        throw Error(`You need set up an execute method when using server side integration`);\r\n                    }\r\n\r\n                    // Paypal expects promise\r\n                    return this.config.onAuthorize(data, actions).toPromise();\r\n                }\r\n\r\n                if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n                    // Make a call to the REST api to execute the payment\r\n                    return actions.payment.execute().then(() => {\r\n                        if (!this.config.onPaymentComplete) {\r\n                            throw Error(`You should provide some callback when payment is finished when using client side integration`);\r\n                        }\r\n                        this.config.onPaymentComplete(data, actions);\r\n                    });\r\n                }\r\n            },\r\n\r\n            onError: (err) => {\r\n                if (this.config.onError) {\r\n                    this.config.onError(err);\r\n                }\r\n            },\r\n\r\n            onCancel: (data, actions) => {\r\n                if (this.config.onCancel) {\r\n                    this.config.onCancel(data, actions);\r\n                }\r\n            }\r\n        }, `#${this.payPalButtonContainerId}`);\r\n    }\r\n\r\n    private getClient(): IPaypalClient | undefined {\r\n        if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n            if (!this.config.client) {\r\n                throw Error(`You need to setup client information when using client side integration`);\r\n            }\r\n\r\n            return {\r\n                production: this.config.client.production,\r\n                sandbox: this.config.client.sandbox\r\n            };\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private getFunding(): {\r\n        allowed: any[],\r\n        disallowed: any[]\r\n    } | undefined {\r\n        // resolve funding to use paypal's properties\r\n        if (!this.config.funding) {\r\n            // no funding provided\r\n            return undefined;\r\n        }\r\n\r\n        const allowed: any[] = [];\r\n        const disallowed: any[] = [];\r\n\r\n        if (this.config.funding.allowed) {\r\n            this.config.funding.allowed.forEach(type => {\r\n                allowed.push(this.mapFundingType(type));\r\n            });\r\n        }\r\n\r\n        if (this.config.funding.disallowed) {\r\n            this.config.funding.disallowed.forEach(type => {\r\n                disallowed.push(this.mapFundingType(type));\r\n            });\r\n        }\r\n\r\n        return {\r\n            allowed: allowed,\r\n            disallowed: disallowed\r\n        };\r\n    }\r\n\r\n    private mapFundingType(type: PayPalFunding): any {\r\n        if (type === PayPalFunding.Card) {\r\n            return paypal.FUNDING.CARD;\r\n        }\r\n        if (type === PayPalFunding.Credit) {\r\n            return paypal.FUNDING.CREDIT;\r\n        }\r\n        if (type === PayPalFunding.Elv) {\r\n            return paypal.FUNDING.ELV;\r\n        }\r\n        throw Error(`Unsupported funding type '${type}'`);\r\n    }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\n\nimport { NgxPaypalComponent } from './components/paypal-component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [\n    NgxPaypalComponent,\n  ],\n  exports: [\n    NgxPaypalComponent,\n  ]\n})\nexport class NgxPayPalModule {\n}\n\n\n","export enum PayPalEnvironment {\r\n\r\n    Sandbox = 'sandbox',\r\n    Production = 'production'\r\n\r\n}\r\n"]}