{"version":3,"file":"ngx-paypal.js.map","sources":["ng://ngx-paypal/lib/models/paypal-models.ts","ng://ngx-paypal/lib/components/paypal-component.ts","ng://ngx-paypal/lib/ngx-paypal.module.ts","ng://ngx-paypal/lib/models/paypal-environment.ts"],"sourcesContent":["import { Observable } from 'rxjs';\r\n\r\nimport { PayPalFunding } from './paypal-funding';\r\nimport { PayPalEnvironment } from './paypal-environment';\r\nimport { PayPalIntegrationType } from './paypal-integration';\r\n\r\nexport class PayPalConfig {\r\n\r\n    /**\r\n     * Show 'Pay Now' button config\r\n     */\r\n    public commit = true;\r\n\r\n    /**\r\n     * Called to create new payment for server side integration\r\n     */\r\n    public payment?: () => Observable<string>;\r\n\r\n    /**\r\n     * Called to execute payment for server side integration\r\n     */\r\n    public onAuthorize?: (data: IPayPalPaymentCompleteData, actions: any) => Observable<void>;\r\n\r\n    /**\r\n     * Client tokens for client side integration\r\n     */\r\n    public client?: IPaypalClient;\r\n\r\n    /**\r\n     * Array of transaction, required for client side integration\r\n     */\r\n    public transactions?: IPayPalTransaction[];\r\n\r\n    /**\r\n     * Called for client side integration when payment is executed\r\n     */\r\n    public onPaymentComplete?: (data: IPayPalPaymentCompleteData, actions: any) => void;\r\n\r\n    /**\r\n     * Button configuration\r\n     */\r\n    public button?: IPayPalButtonStyle;\r\n\r\n    /**\r\n     * Paypal funding configuration\r\n     */\r\n    public funding?: IPayPalFunding;\r\n\r\n    /**\r\n     * Called when PayPal experiences an error\r\n     */\r\n    public onError?: (err: any) => void;\r\n\r\n    /**\r\n     * Called when user cancels payment\r\n     */\r\n    public onCancel?: (data: IPayPalCancelPayment, actions: any) => void;\r\n\r\n    constructor(\r\n        /**\r\n         * Type of the integration\r\n         */\r\n        public integrationType: PayPalIntegrationType,\r\n        /**\r\n         * Environment\r\n         */\r\n        public environment: PayPalEnvironment,\r\n        config: {\r\n            onError?: (err: any) => void,\r\n            onCancel?: (data: IPayPalCancelPayment, actions: any) => void,\r\n            payment?: () => Observable<string>,\r\n            onAuthorize?: (data: IPayPalPaymentCompleteData, actions: any) => Observable<void>,\r\n            client?: IPaypalClient,\r\n            onPaymentComplete?: (data: IPayPalPaymentCompleteData, actions: any) => void,\r\n            transactions?: IPayPalTransaction[],\r\n            commit?: boolean,\r\n            button?: IPayPalButtonStyle,\r\n            funding?: IPayPalFunding\r\n        }) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\n\r\nexport interface IPayPalPaymentCompleteData {\r\n    intent: string;\r\n    orderID: string;\r\n    payerID: string;\r\n    paymentID: string;\r\n    paymentToken: string;\r\n    returnUrl: string;\r\n}\r\n\r\nexport interface IPayPalCancelPayment {\r\n    data: IPayPalCancelPaymentData;\r\n    actions: any;\r\n}\r\n\r\nexport interface IPayPalCancelPaymentData {\r\n    billingID: string;\r\n    cancelUrl: string;\r\n    intent: string;\r\n    paymentID: string;\r\n    paymentToken: string;\r\n}\r\n\r\nexport interface IPaypalClient {\r\n    sandbox?: string;\r\n    production?: string;\r\n}\r\n\r\nexport interface IPayPalTransaction {\r\n    amount: IPayPalAmount;\r\n    custom?: string;\r\n}\r\n\r\nexport interface IPayPalAmount {\r\n    total: number;\r\n    currency: string;\r\n}\r\n\r\nexport interface IPayPalButtonStyle {\r\n    label?: 'checkout' | 'pay' | 'buynow' | 'paypal';\r\n    size?: 'small' | 'medium' | 'large' | 'responsive';\r\n    shape?: 'pill' | 'rect';\r\n    color?: 'gold' | 'blue' | 'silver' | 'black';\r\n    tagline?: false;\r\n    fundingicons?: boolean;\r\n    branding?: boolean;\r\n}\r\n\r\nexport interface IPayPalFunding {\r\n    allowed: PayPalFunding[];\r\n    disallowed: PayPalFunding[];\r\n}\r\n\r\n","import { AfterViewInit, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild } from '@angular/core';\r\n\r\nimport { PayPalFunding } from '../models/paypal-funding';\r\nimport { PayPalIntegrationType } from '../models/paypal-integration';\r\nimport { IPaypalClient, IPayPalPaymentCompleteData, PayPalConfig } from '../models/paypal-models';\r\n\r\n/**\r\n * Global variable where PayPal is loaded to\r\n */\r\ndeclare var paypal: any;\r\n\r\n@Component({\r\n    selector: 'ngx-paypal',\r\n    template: `\r\n    <div #payPalScriptElem></div>\r\n    <div #payPalButtonContainerElem [id]=\"payPalButtonContainerId\"></div>\r\n    `\r\n})\r\nexport class NgxPaypalComponent implements OnChanges, AfterViewInit {\r\n\r\n    /**\r\n     * Configuration for paypal.\r\n     */\r\n    @Input() config: PayPalConfig;\r\n\r\n    /**\r\n     * Indicates if global configuration (provided via 'forRoot') is used\r\n     */\r\n    @Input() useGlobalConfig = false;\r\n\r\n    /**\r\n     * Container for paypal script\r\n     */\r\n    @ViewChild('payPalScriptElem') paypalScriptElem: ElementRef;\r\n\r\n    /**\r\n     * Used for indicating delayed rendered if container is not yet ready in DOM\r\n     */\r\n    private registerPayPalScriptWhenContainerIsReady = false;\r\n\r\n    /**\r\n     * Holds current container element\r\n     */\r\n    private _payPalButtonContainerElem?: ElementRef;\r\n    @ViewChild('payPalButtonContainerElem') set payPalButtonContainerElem(content: ElementRef) {\r\n        if (content) {\r\n            this._payPalButtonContainerElem = content;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Name of the global variable where paypal is stored\r\n    */\r\n    private readonly paypalWindowName = 'paypal';\r\n\r\n    /**\r\n     * PayPal integration script url\r\n     */\r\n    private readonly paypalScriptUrl = 'https://www.paypalobjects.com/api/checkout.js';\r\n\r\n    /**\r\n     * Id of the element where PayPal button will be rendered\r\n     */\r\n    public payPalButtonContainerId?: string;\r\n\r\n    private readonly payPalButtonContainerIdPrefix = 'ngx-paypal-button-container-';\r\n\r\n    constructor(\r\n    ) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // init when config once its available\r\n        if (this.config) {\r\n            this.initPayPal();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        // register script if element is ready in dom\r\n        if (this.registerPayPalScriptWhenContainerIsReady && this._payPalButtonContainerElem) {\r\n            this.setupScript();\r\n            this.registerPayPalScriptWhenContainerIsReady = false;\r\n        }\r\n    }\r\n\r\n    private initPayPal(): void {\r\n        // set unique paypal container button id\r\n        this.payPalButtonContainerId = `${this.payPalButtonContainerIdPrefix}${this.getPseudoUniqueNumber()}`;\r\n        // check if paypal was already register and if so, don't add it to page again\r\n        if (!window[this.paypalWindowName]) {\r\n            // register script\r\n            this.addPayPalScriptToPage();\r\n        } else {\r\n            // just register payment\r\n            this.handleScriptRegistering();\r\n        }\r\n    }\r\n\r\n    private getPseudoUniqueNumber(): number {\r\n        return new Date().valueOf();\r\n    }\r\n\r\n    private addPayPalScriptToPage(): void {\r\n        const script = document.createElement('script');\r\n        script.innerHTML = '';\r\n        script.src = this.paypalScriptUrl;\r\n        script.onload = () => this.handleScriptRegistering();\r\n        script.async = true;\r\n        script.defer = true;\r\n\r\n        this.paypalScriptElem.nativeElement.appendChild(script);\r\n    }\r\n\r\n    private handleScriptRegistering(): void {\r\n        // check if container with requested id exists\r\n        // this is here because dynamically switching between components would cause PayPal to\r\n        // throw an error if the container already existed before\r\n        if (this._payPalButtonContainerElem && this._payPalButtonContainerElem.nativeElement &&\r\n            this._payPalButtonContainerElem.nativeElement.id === this.payPalButtonContainerId) {\r\n            // container is ready, setup script right away\r\n            this.setupScript();\r\n        } else {\r\n            // container is not ready, delay registering until it is\r\n            this.registerPayPalScriptWhenContainerIsReady = true;\r\n        }\r\n    }\r\n\r\n    private setupScript(): void {\r\n        // first clear container\r\n        if (!this._payPalButtonContainerElem) {\r\n            throw Error(`Cannot setup script because paypal button container with id '${this.payPalButtonContainerId}' is not yet ready`);\r\n        }\r\n\r\n        this._payPalButtonContainerElem.nativeElement.innerHTML = '';\r\n\r\n        if (!window[this.paypalWindowName]) {\r\n            throw Error('PayPal script is not available', );\r\n        }\r\n\r\n        // render PayPal button as per their docs at\r\n        // https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/add-paypal-button/\r\n        window[this.paypalWindowName].Button.render({\r\n            // set environment\r\n            env: this.config.environment.toString(),\r\n\r\n            // Show the buyer a 'Pay Now' button in the checkout flow\r\n            commit: this.config.commit,\r\n\r\n            // init client for client side integration\r\n            client: this.getClient(),\r\n\r\n            // set button config if available\r\n            style: this.config.button,\r\n\r\n            // set funding if available\r\n            funding: this.getFunding(),\r\n\r\n            // payment() is called when the button is clicked\r\n            payment: (data, actions) => {\r\n                if (this.config.integrationType === PayPalIntegrationType.ServerSideREST) {\r\n                    // client needs to create payment on server side\r\n                    if (!this.config.payment) {\r\n                        throw Error(`You need set up a create payment method and return\r\n                            PayPal's payment id when using server side integration`);\r\n                    }\r\n\r\n                    // Paypal expects promise with payment id (string) to be returned\r\n                    return this.config.payment().toPromise()\r\n                        .then(paymentId => {\r\n                            return paymentId;\r\n                        });\r\n                }\r\n\r\n                if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n                    if (!this.config.transactions || !Array.isArray(this.config.transactions) || this.config.transactions.length <= 0) {\r\n                        throw Error(`You need to provide at least 1 transaction for client side integration`);\r\n                    }\r\n\r\n                    return actions.payment.create({\r\n                        payment: {\r\n                            transactions: this.config.transactions\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n\r\n            // onAuthorize() is called when the buyer approves the payment\r\n            onAuthorize: (data: IPayPalPaymentCompleteData, actions: any) => {\r\n                if (this.config.integrationType === PayPalIntegrationType.ServerSideREST) {\r\n                    // client needs to server to execute the payment\r\n                    if (!this.config.onAuthorize) {\r\n                        throw Error(`You need set up an execute method when using server side integration`);\r\n                    }\r\n\r\n                    // Paypal expects promise\r\n                    return this.config.onAuthorize(data, actions).toPromise();\r\n                }\r\n\r\n                if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n                    // Make a call to the REST api to execute the payment\r\n                    return actions.payment.execute().then(() => {\r\n                        if (!this.config.onPaymentComplete) {\r\n                            throw Error(`You should provide some callback when payment is finished when using client side integration`);\r\n                        }\r\n                        this.config.onPaymentComplete(data, actions);\r\n                    });\r\n                }\r\n            },\r\n\r\n            onError: (err) => {\r\n                if (this.config.onError) {\r\n                    this.config.onError(err);\r\n                }\r\n            },\r\n\r\n            onCancel: (data, actions) => {\r\n                if (this.config.onCancel) {\r\n                    this.config.onCancel(data, actions);\r\n                }\r\n            }\r\n        }, `#${this.payPalButtonContainerId}`);\r\n    }\r\n\r\n    private getClient(): IPaypalClient | undefined {\r\n        if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n            if (!this.config.client) {\r\n                throw Error(`You need to setup client information when using client side integration`);\r\n            }\r\n\r\n            return {\r\n                production: this.config.client.production,\r\n                sandbox: this.config.client.sandbox\r\n            };\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private getFunding(): {\r\n        allowed: any[],\r\n        disallowed: any[]\r\n    } | undefined {\r\n        // resolve funding to use paypal's properties\r\n        if (!this.config.funding) {\r\n            // no funding provided\r\n            return undefined;\r\n        }\r\n\r\n        const allowed: any[] = [];\r\n        const disallowed: any[] = [];\r\n\r\n        if (this.config.funding.allowed) {\r\n            this.config.funding.allowed.forEach(type => {\r\n                allowed.push(this.mapFundingType(type));\r\n            });\r\n        }\r\n\r\n        if (this.config.funding.disallowed) {\r\n            this.config.funding.disallowed.forEach(type => {\r\n                disallowed.push(this.mapFundingType(type));\r\n            });\r\n        }\r\n\r\n        return {\r\n            allowed: allowed,\r\n            disallowed: disallowed\r\n        };\r\n    }\r\n\r\n    private mapFundingType(type: PayPalFunding): any {\r\n        if (type === PayPalFunding.Card) {\r\n            return paypal.FUNDING.CARD;\r\n        }\r\n        if (type === PayPalFunding.Credit) {\r\n            return paypal.FUNDING.CREDIT;\r\n        }\r\n        if (type === PayPalFunding.Elv) {\r\n            return paypal.FUNDING.ELV;\r\n        }\r\n        throw Error(`Unsupported funding type '${type}'`);\r\n    }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\n\nimport { NgxPaypalComponent } from './components/paypal-component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [\n    NgxPaypalComponent,\n  ],\n  exports: [\n    NgxPaypalComponent,\n  ]\n})\nexport class NgxPayPalModule {\n}\n\n\n","export enum PayPalEnvironment {\r\n\r\n    Sandbox = 'sandbox',\r\n    Production = 'production'\r\n\r\n}\r\n"],"names":[],"mappings":"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"}
