import { Observable } from 'rxjs';
import { PayPalFunding } from './paypal-funding';
import { PayPalEnvironment } from './paypal-environment';
import { PayPalIntegrationType } from './paypal-integration';
export declare class PayPalConfig {
    /**
     * Type of the integration
     */
    integrationType: PayPalIntegrationType;
    /**
     * Environment
     */
    environment: PayPalEnvironment;
    /**
     * Show 'Pay Now' button config
     */
    commit: boolean;
    /**
     * Called to create new payment for server side integration
     */
    payment?: () => Observable<string>;
    /**
     * Called to execute payment for server side integration
     */
    onAuthorize?: (data: IPayPalPaymentCompleteData, actions: any) => Observable<void>;
    /**
     * Client tokens for client side integration
     */
    client?: IPaypalClient;
    /**
     * Array of transaction, required for client side integration
     */
    transactions?: IPayPalTransaction[];
    /**
     * Called for client side integration when payment is executed
     */
    onPaymentComplete?: (data: IPayPalPaymentCompleteData, actions: any) => void;
    /**
     * Button configuration
     */
    button?: IPayPalButtonStyle;
    /**
     * Paypal funding configuration
     */
    funding?: IPayPalFunding;
    /**
     * Called when PayPal experiences an error
     */
    onError?: (err: any) => void;
    /**
     * Called when user cancels payment
     */
    onCancel?: (data: IPayPalCancelPayment, actions: any) => void;
    constructor(
        /**
         * Type of the integration
         */
        integrationType: PayPalIntegrationType, 
        /**
         * Environment
         */
        environment: PayPalEnvironment, config: {
        onError?: (err: any) => void;
        onCancel?: (data: IPayPalCancelPayment, actions: any) => void;
        payment?: () => Observable<string>;
        onAuthorize?: (data: IPayPalPaymentCompleteData, actions: any) => Observable<void>;
        client?: IPaypalClient;
        onPaymentComplete?: (data: IPayPalPaymentCompleteData, actions: any) => void;
        transactions?: IPayPalTransaction[];
        commit?: boolean;
        button?: IPayPalButtonStyle;
        funding?: IPayPalFunding;
    });
}
export interface IPayPalPaymentCompleteData {
    intent: string;
    orderID: string;
    payerID: string;
    paymentID: string;
    paymentToken: string;
    returnUrl: string;
}
export interface IPayPalCancelPayment {
    data: IPayPalCancelPaymentData;
    actions: any;
}
export interface IPayPalCancelPaymentData {
    billingID: string;
    cancelUrl: string;
    intent: string;
    paymentID: string;
    paymentToken: string;
}
export interface IPaypalClient {
    sandbox?: string;
    production?: string;
}
export interface IPayPalTransaction {
    amount: IPayPalAmount;
    custom?: string;
}
export interface IPayPalAmount {
    total: number;
    currency: string;
}
export interface IPayPalButtonStyle {
    label?: 'checkout' | 'pay' | 'buynow' | 'paypal';
    size?: 'small' | 'medium' | 'large' | 'responsive';
    shape?: 'pill' | 'rect';
    color?: 'gold' | 'blue' | 'silver' | 'black';
    tagline?: false;
    fundingicons?: boolean;
    branding?: boolean;
}
export interface IPayPalFunding {
    allowed: PayPalFunding[];
    disallowed: PayPalFunding[];
}
